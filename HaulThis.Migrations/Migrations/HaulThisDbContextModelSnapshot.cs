// <auto-generated />
using System;
using HaulThis.Database.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HaulThis.Database.Migrations
{
    [DbContext(typeof(HaulThisDbContext))]
    partial class HaulThisDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HaulThis.Database.Models.Confirmation", b =>
                {
                    b.Property<int>("ConfirmationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConfirmationID"));

                    b.Property<int>("ItemID")
                        .HasColumnType("int");

                    b.Property<string>("ReceiverSignature")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConfirmationID");

                    b.HasIndex("ItemID");

                    b.ToTable("Confirmations");
                });

            modelBuilder.Entity("HaulThis.Database.Models.Driver", b =>
                {
                    b.Property<int>("DriverID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DriverID"));

                    b.Property<bool>("IsQualifiedForDangerousGoods")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DriverID");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("HaulThis.Database.Models.Item", b =>
                {
                    b.Property<int>("ItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDangerous")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFragile")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrackingID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TripID")
                        .HasColumnType("int");

                    b.HasKey("ItemID");

                    b.HasIndex("TripID");

                    b.ToTable("Item");
                });

            modelBuilder.Entity("HaulThis.Database.Models.ItemLocation", b =>
                {
                    b.Property<int>("ItemLocationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemLocationID"));

                    b.Property<bool>("IsPickup")
                        .HasColumnType("bit");

                    b.Property<int>("ItemID")
                        .HasColumnType("int");

                    b.Property<int>("LocationID")
                        .HasColumnType("int");

                    b.HasKey("ItemLocationID");

                    b.HasIndex("ItemID");

                    b.HasIndex("LocationID");

                    b.ToTable("ItemLocation");
                });

            modelBuilder.Entity("HaulThis.Database.Models.Location", b =>
                {
                    b.Property<int>("LocationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("County")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TripID")
                        .HasColumnType("int");

                    b.HasKey("LocationID");

                    b.HasIndex("TripID");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("HaulThis.Database.Models.Trip", b =>
                {
                    b.Property<int>("TripID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TripID"));

                    b.Property<int>("DriverID")
                        .HasColumnType("int");

                    b.Property<string>("Vehicle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TripID");

                    b.HasIndex("DriverID");

                    b.ToTable("Trips");
                });

            modelBuilder.Entity("HaulThis.Database.Models.Confirmation", b =>
                {
                    b.HasOne("HaulThis.Database.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("HaulThis.Database.Models.Item", b =>
                {
                    b.HasOne("HaulThis.Database.Models.Trip", null)
                        .WithMany("Items")
                        .HasForeignKey("TripID");
                });

            modelBuilder.Entity("HaulThis.Database.Models.ItemLocation", b =>
                {
                    b.HasOne("HaulThis.Database.Models.Item", "Item")
                        .WithMany("ItemLocations")
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HaulThis.Database.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("HaulThis.Database.Models.Location", b =>
                {
                    b.HasOne("HaulThis.Database.Models.Trip", null)
                        .WithMany("Locations")
                        .HasForeignKey("TripID");
                });

            modelBuilder.Entity("HaulThis.Database.Models.Trip", b =>
                {
                    b.HasOne("HaulThis.Database.Models.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("HaulThis.Database.Models.Item", b =>
                {
                    b.Navigation("ItemLocations");
                });

            modelBuilder.Entity("HaulThis.Database.Models.Trip", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Locations");
                });
#pragma warning restore 612, 618
        }
    }
}
